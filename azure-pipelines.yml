# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - '*'

strategy:
  matrix:
    WindowsPython37:
      os.version: 'windows-latest'
      python.version: '3.7'
    WindowsPython38:
      os.version: 'windows-latest'
      python.version: '3.8'
    WindowsPython39:
      os.version: 'windows-latest'
      python.version: '3.9'
    LinuxPython37:
      os.version: 'ubuntu-latest'
      python.version: '3.7'
    LinuxPython38:
      os.version: 'ubuntu-latest'
      python.version: '3.8'
    LinuxPython39:
      os.version: 'ubuntu-latest'
      python.version: '3.9'

pool:
  vmImage: '$(os.version)'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    set JDK_HOME=C:\hostedtoolcache\windows\Java_Temurin-Hotspot_jdk\8.0.312-7\x64
    choco install graphviz
  condition: eq($(os.version), windows-latest)
  displayName: 'Prepare windows machine'

- script: sudo apt install graphviz
  condition: eq($(os.version), ubuntu-latest)
  displayName: 'Prepare linux machine'

- script: |
    python -m pip install --upgrade pip
    pip install git+git://github.com/bd2kccd/py-causal
    pip install -r requirements.txt
  displayName: 'Install package dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pip install pytest-cov
    python -m pytest --junitxml=junit/test-results.xml --cov=cause2e --cov-report=xml tests
  displayName: 'Run tests with pytest and check test coverage'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'
  displayName: 'Publish test results'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
  displayName: 'Publish coverage results'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/tests/output'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**'
  displayName: 'Copy output files from end-to-end test to artifact directory'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'output end-to-end test'
    publishLocation: 'Container'
  displayName: 'Publish output files as artifact'

- script: pip install --upgrade sphinx
  displayName: 'Install sphinx'

- script: python setup.py install
  displayName: 'Setup python package.'

- task: CmdLine@2
  inputs:
    script: 'make html'
    workingDirectory: '$(Build.SourcesDirectory)/sphinx_config/'
  displayName: 'Compile documentation'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/sphinx_config/_build/html'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**'
  displayName: 'Copy documentation files to artifact directory'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'documentation'
    publishLocation: 'Container'
  displayName: 'Publish documentation as artifact'

# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - '*'

strategy:
  matrix:
    WindowsPython37:
      os.version: 'windows-latest'
      python.version: '3.7'
    WindowsPython38:
      os.version: 'windows-latest'
      python.version: '3.8'
    WindowsPython39:
      os.version: 'windows-latest'
      python.version: '3.9'
    LinuxPython37:
      os.version: 'ubuntu-latest'
      python.version: '3.7'
    LinuxPython38:
      os.version: 'ubuntu-latest'
      python.version: '3.8'
    LinuxPython39:
      os.version: 'ubuntu-latest'
      python.version: '3.9'

pool:
  vmImage: '$(os.version)'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    set jdk_dir=C:\hostedtoolcache\windows\Java_Temurin-Hotspot_jdk
    dir %jdk_dir%
    FOR /F "tokens=*" %%g IN ('dir /b /ad %jdk_dir%\8.0.*') do (SET JDK_HOME=%jdk_dir%\%%g\x64)
    echo %JDK_HOME%
    choco install graphviz
    pip install wheel
    pip install https://github.com/bd2kccd/py-causal/archive/master.tar.gz
    pip install -r requirements.txt
  condition: eq(variables['os.version'], 'windows-latest')
  displayName: 'Install dependencies (windows)'

- script: |
    sudo apt install graphviz
    pip install wheel
    pip install https://github.com/bd2kccd/py-causal/archive/master.tar.gz
    pip install -r requirements.txt
  condition: eq(variables['os.version'], 'ubuntu-latest')
  displayName: 'Install dependencies (linux)'

- script: |
    pip install pytest pytest-azurepipelines
    pip install pytest-cov
    python -m pytest --junitxml=junit/test-results.xml --cov=cause2e --cov-report=xml tests
  displayName: 'Run tests with pytest and check test coverage'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version) on $(os.version)'
  displayName: 'Publish test results'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
  displayName: 'Publish coverage results'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/tests/output'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**'
  displayName: 'Copy output files from end-to-end test to artifact directory'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(os.version)_output end-to-end test'
    publishLocation: 'Container'
  displayName: 'Publish output files as artifact'
